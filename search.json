[{"path":"https://nx10.github.io/httpgd/articles/a00_installation.html","id":"system-requirements","dir":"Articles","previous_headings":"","what":"System requirements","title":"Installation","text":"Depends R version ≥ 4.0 windows, R ≥ 3.2 linux macOS (C++ compiler basic C++17 support required). Note rare bug R versions < 4.1, leads plots disappearing ggplot2 plots resized deleted specific way. libpng X11 required unix like systems (e.g. Linux, macOS). Cairo required unix like systems enable PNG, PDF, EPS PS renderers.","code":""},{"path":"https://nx10.github.io/httpgd/articles/a00_installation.html","id":"macos","dir":"Articles","previous_headings":"System requirements","what":"macOS","title":"Installation","text":"libpng missing install via: X11 missing error message include text: Install XQuartz. (see: https://github.com/r-lib/systemfonts/issues/17)","code":"brew install libpng unable to load shared object [...] systemfonts/libs/systemfonts.so [...]"},{"path":"https://nx10.github.io/httpgd/articles/a00_installation.html","id":"linux","dir":"Articles","previous_headings":"System requirements","what":"Linux","title":"Installation","text":"source installation Linux, fontconfig freetype2 library required install systemfonts package, dependency httpgd.","code":""},{"path":"https://nx10.github.io/httpgd/articles/a00_installation.html","id":"debian-ubuntu-etc-","dir":"Articles","previous_headings":"System requirements > Linux","what":"Debian, Ubuntu, etc.","title":"Installation","text":"","code":"apt install libfontconfig1-dev"},{"path":"https://nx10.github.io/httpgd/articles/a00_installation.html","id":"fedora-centos-rhel-etc-","dir":"Articles","previous_headings":"System requirements > Linux","what":"Fedora, CentOS, RHEL, etc.","title":"Installation","text":"","code":"dnf install fontconfig-devel"},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/b02_rstudio.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"RStudio","text":"open client embedded RStudio Viewer-tab call hgd_view() starting server: view client external browser window call:","code":"library(httpgd) hgd() hgd_view() # hgd() hgd_browse()"},{"path":"https://nx10.github.io/httpgd/articles/b02_rstudio.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"RStudio","text":"Sometimes (Viewer-tab resized plot Plots-tab) RStudio activate graphics device, Plots-tab obtain focus, httpgd show message “Device inactive.” Viewer-tab. list graphics devices (dev.list()) look something like : can easily solved closing current (RStudioGD) graphics device: dev.list() show httpgd device: problem reappear afterwards, even resizing pane.","code":"> dev.list() RStudioGD   agg_png    httpgd          2         3         4 > dev.off() httpgd       4 > dev.list() httpgd       4"},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/b03_docker.html","id":"build-a-docker-image","dir":"Articles","previous_headings":"Basic usage","what":"Build a docker image","title":"Docker","text":"See vignette(\"a00_installation\") details install httpgd Linux. can create Docker image httpgd installed create Dockerfile like . Run docker build command shell build Docker image.","code":"FROM r-base:latest  # Install httpgd and dependent packages. RUN apt-get update \\     && apt-get install -y --no-install-recommends \\     libfontconfig1-dev \\     && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* \\     && install2.r --error --skipinstalled --ncpu -1 \\     httpgd \\     && rm -rf /tmp/downloaded_packages docker build . -f Dockerfile -t httpgd:test"},{"path":"https://nx10.github.io/httpgd/articles/b03_docker.html","id":"create-a-container","dir":"Articles","previous_headings":"Basic usage","what":"Create a container","title":"Docker","text":"creating container docker run command, bind port used httpgd -p (--publish) option. run R container command like following, 8888 port container bound 8888 port Docker host.","code":"docker run --rm -it -p 8888:8888 httpgd:test R"},{"path":"https://nx10.github.io/httpgd/articles/b03_docker.html","id":"start-httpgd-server","dir":"Articles","previous_headings":"Basic usage","what":"Start httpgd server","title":"Docker","text":"Running following command R console initialize graphics device start server. , copy displayed link browser. want display link , execute hgd_url() function follows. hostname can replaced value (e.g. localhost).","code":"httpgd::hgd(host = \"0.0.0.0\", port = 8888) httpgd::hgd_url(host = \"localhost\")"},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/b03_docker.html","id":"set-options-in-rprofile","dir":"Articles","previous_headings":"Advanced usage","what":"Set options in Rprofile","title":"Docker","text":"setting options httpgd.host httpgd.port Rprofile, can omit setting arguments starting httpgd server hgd(). example, create Dockerfile following contents, can build image options already set Rprofile.","code":"FROM r-base:latest  # Install httpgd and dependent packages. RUN apt-get update \\     && apt-get install -y --no-install-recommends \\     libfontconfig1-dev \\     && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* \\     && install2.r --error --skipinstalled --ncpu -1 \\     httpgd \\     && rm -rf /tmp/downloaded_packages  # Set default values used in the httpgd::hgd() function. RUN echo 'options(httpgd.host = \"0.0.0.0\", httpgd.port = 8888)' >> /etc/R/Rprofile.site  EXPOSE 8888"},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"get-state","dir":"Articles","previous_headings":"","what":"Get state","title":"httpgd API","text":"APIs can accessed stateless, graphics device state defined . receive state changes happen WebSockets can used. Alternatively /state may polled repeatedly.","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r","dir":"Articles","previous_headings":"Get state","what":"From R","title":"httpgd API","text":"respond list object including fields containing host, port security token server.","code":"hgd_state()"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http","dir":"Articles","previous_headings":"Get state","what":"From HTTP","title":"httpgd API","text":"respond JSON object.","code":"/state"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-websockets","dir":"Articles","previous_headings":"Get state","what":"From WebSockets","title":"httpgd API","text":"httpgd accepts WebSocket connections port HTTP server. Server state changes broadcasted immediately connected clients JSON format.","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"get-renderers","dir":"Articles","previous_headings":"","what":"Get Renderers","title":"httpgd API","text":"httpgd includes multiple renderers can dynamically render plots different target formats. new formats may added development httpgd continues, depend optional system dependencies, list available renderers can obtained runtime. following complete list renderers.","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r-1","dir":"Articles","previous_headings":"Get Renderers","what":"From R","title":"httpgd API","text":"respond list object.","code":"hgd_renderers()"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http-1","dir":"Articles","previous_headings":"Get Renderers","what":"From HTTP","title":"httpgd API","text":"","code":"/renderers"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"render-plot","dir":"Articles","previous_headings":"","what":"Render plot","title":"httpgd API","text":"Plots can rendered various file formats R HTTP. actual plot construction R relatively slow httpgd caches plot last requested size. Subsequent calls width height without size specified always fast. (way “flipping” plot pages fast.)","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r-2","dir":"Articles","previous_headings":"Render plot","what":"From R","title":"httpgd API","text":"Example: page can either number indicate plot index static plot ID (see: hgd_id()). function returns plot string. file attribute can used save SVG directly disk.","code":"hgd_plot(page = 3, width = 800, height = 600) # Get plot at index 3 with 800*600 hgd_plot() # Get last plot with cached size"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http-2","dir":"Articles","previous_headings":"Render plot","what":"From HTTP","title":"httpgd API","text":"Example: Parameters: Note HTTP API uses 0-based indexing R API 1-based indexing. done conform R JavaScript ends. (means first plot accessed /svg?index=0 hgd_svg(page = 1).)","code":"/plot?index=2&width=800&height=600"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"render-svg","dir":"Articles","previous_headings":"","what":"Render SVG","title":"httpgd API","text":"API deprecated removed future. hgd_svg() /svg equivalent hgd_plot() /plot default renderer SVG.","code":""},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r-3","dir":"Articles","previous_headings":"Remove plots","what":"From R","title":"httpgd API","text":"Examples:","code":"hgd_remove(page = 2) # Remove the second page hgd_clear() # Clear all pages"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http-3","dir":"Articles","previous_headings":"Remove plots","what":"From HTTP","title":"httpgd API","text":"Examples:","code":"/remove?index=2 /clear"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"get-static-ids","dir":"Articles","previous_headings":"","what":"Get static IDs","title":"httpgd API","text":"problem requesting individual plots index , plots index change earlier plots removed plot history. circumvent , plot also assigned static ID. APIs access individual plots can also called static IDs instead indices.","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r-4","dir":"Articles","previous_headings":"Get static IDs","what":"From R","title":"httpgd API","text":"Examples: Note: limit parameter can adjusted obtain multiple plot IDs.","code":"hgd_id(index = 2) # Static ID of the second plot hgd_id() # Static ID of the last plot"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http-4","dir":"Articles","previous_headings":"Get static IDs","what":"From HTTP","title":"httpgd API","text":"Examples: Notes: limit parameter can specified support pagination. JSON response contain state allow checking desynchronisation.","code":"/plots?index=2 /plots"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"security","dir":"Articles","previous_headings":"","what":"Security","title":"httpgd API","text":"security token can set starting device: set, API request include token inside header X-HTTPGD-TOKEN query param ?token=secret. token default set TRUE generate random 8 character alphanumeric token. set number, random token length generated. FALSE deactivates security token. CORS default can enabled startup:","code":"hgd(..., token = \"secret\") hgd(..., cors = TRUE)"},{"path":"https://nx10.github.io/httpgd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Florian Rupprecht. Author, maintainer. Kun Ren. Contributor. Jeroen Ooms. Contributor. Hadley Wickham. Copyright holder.            Author included svglite code Lionel Henry. Copyright holder.            Author included svglite code Thomas Lin Pedersen. Copyright holder.            Author creator included svglite code T Jake Luciani. Copyright holder.            Author included svglite code Matthieu Decorde. Copyright holder.            Author included svglite code Vaudor Lise. Copyright holder.            Author included svglite code Tony Plate. Copyright holder.            Contributor included svglite code David Gohel. Copyright holder.            Contributor included svglite code Yixuan Qiu. Copyright holder.            Contributor included svglite code Håkon Malmedal. Copyright holder.            Contributor included svglite code RStudio. Copyright holder.            Copyright holder included svglite code Brett Robinson. Copyright holder.            Author included belle library Google. Copyright holder.            Copyright holder included material design icons Victor Zverovich. Copyright holder.            Author included fmt library","code":""},{"path":"https://nx10.github.io/httpgd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rupprecht F (2022). httpgd: 'HTTP' Server Graphics Device. https://github.com/nx10/httpgd, https://nx10.github.io/httpgd/.","code":"@Manual{,   title = {httpgd: A 'HTTP' Server Graphics Device},   author = {Florian Rupprecht},   year = {2022},   note = {https://github.com/nx10/httpgd, https://nx10.github.io/httpgd/}, }"},{"path":"https://nx10.github.io/httpgd/index.html","id":"httpgd-","dir":"","previous_headings":"","what":"A HTTP Server Graphics Device","title":"A HTTP Server Graphics Device","text":"graphics device R accessible via network protocols. package created make easier embed live R graphics integrated development environments applications. included HTML/JavaScript client (plot viewer) aims provide better overall user experience dealing R graphics. device asynchronously serves graphics via HTTP WebSockets.","code":""},{"path":"https://nx10.github.io/httpgd/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"A HTTP Server Graphics Device","text":"Fast plotting Plot resizing history Interactive plot viewer (client) Platform independent Export various image formats (SVG, PNG, PDF, EPS, …) Multiple concurrent clients Stateless asynchronous HTTP/WebSocket API -memory access rendered plots HTML/JavaScript client (TypeScript module)","code":""},{"path":[]},{"path":"https://nx10.github.io/httpgd/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A HTTP Server Graphics Device","text":"Install httpgd CRAN: get latest development version GitHub: See system requirements troubleshooting.","code":"install.packages(\"httpgd\") remotes::install_github(\"nx10/httpgd\")"},{"path":"https://nx10.github.io/httpgd/index.html","id":"documentation","dir":"","previous_headings":"Installation","what":"Documentation","title":"A HTTP Server Graphics Device","text":"get started Function reference VS Code RStudio Docker httpgd API","code":""},{"path":"https://nx10.github.io/httpgd/index.html","id":"contributions-welcome","dir":"","previous_headings":"","what":"Contributions welcome!","title":"A HTTP Server Graphics Device","text":"various components httpgd written C++, R TypeScript. welcome contributions kind. areas need improvement testing documentation.","code":""},{"path":"https://nx10.github.io/httpgd/index.html","id":"links--articles","dir":"","previous_headings":"","what":"Links & Articles","title":"A HTTP Server Graphics Device","text":"Using httpgd VSCode: web-based SVG graphics device","code":""},{"path":"https://nx10.github.io/httpgd/index.html","id":"about--license","dir":"","previous_headings":"","what":"About & License","title":"A HTTP Server Graphics Device","text":"Depends cpp11 systemfonts. Webserver based Boost/Beast included BH package. Much font handling SVG rendering code modified code excellent svglite package. project licensed GPL v2.0. includes parts svglite (GPL ≥ 2), Belle (MIT) fmt (MIT). HTML client includes Material Design icons Google licensed Apache License Version 2.0. Full copies license agreements used components included ./inst/licenses.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous HTTP server graphics device. — hgd","title":"Asynchronous HTTP server graphics device. — hgd","text":"function initializes httpgd graphics device starts local webserver, allows access via HTTP WebSockets. link printed web client can accessed using browser.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous HTTP server graphics device. — hgd","text":"","code":"hgd(   host = getOption(\"httpgd.host\", \"127.0.0.1\"),   port = getOption(\"httpgd.port\", 0),   width = getOption(\"httpgd.width\", 720),   height = getOption(\"httpgd.height\", 576),   bg = getOption(\"httpgd.bg\", \"white\"),   pointsize = getOption(\"httpgd.pointsize\", 12),   system_fonts = getOption(\"httpgd.system_fonts\", list()),   user_fonts = getOption(\"httpgd.user_fonts\", list()),   cors = getOption(\"httpgd.cors\", FALSE),   token = getOption(\"httpgd.token\", TRUE),   silent = getOption(\"httpgd.silent\", FALSE),   websockets = getOption(\"httpgd.websockets\", TRUE),   webserver = getOption(\"httpgd.webserver\", TRUE),   fix_text_width = getOption(\"httpgd.fix_text_width\", TRUE),   extra_css = getOption(\"httpgd.extra_css\", \"\"),   reset_par = getOption(\"httpgd.reset_par\", FALSE) )"},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous HTTP server graphics device. — hgd","text":"host Server hostname. Set \"0.0.0.0\" enable remote access. recommend enable remote access trusted networks. network security httpgd yet properly tested. port Server port. set 0, open port assigned. width Graphics device width (pixels). height Graphics device height (pixels). bg Background color. pointsize Graphics device point size. system_fonts Named list font names aliased fonts installed system. unspecified, R default families sans, serif, mono symbol aliased family returned systemfonts::font_info(). user_fonts Named list fonts aliased font files provided user rather fonts properly installed system. aliases can fonts fontquiver package, strings containing path font file, list containing name file elements name indicating font alias SVG output file path font file. cors Toggles Cross-Origin Resource Sharing (CORS) header. set TRUE, CORS header set \"*\". token (Optional) security token. set, requests need include token allowed. (Either request header (X-HTTPGD-TOKEN) field query parameter.) parameter can set TRUE generate random 8 character alphanumeric token. random token specified length generated set number. FALSE deactivates token. silent set FALSE information printed console. websockets Use websockets. webserver Can set FALSE offline mode. offline mode device accessible via R. fix_text_width width strings fixed change SVG renderers depending font rendering? Defaults TRUE. TRUE string textLength CSS property set width calculated systemfonts lengthAdjust='spacingAndGlyphs'. Setting FALSE can beneficial heavy post-processing may change content style strings, may lead inconsistencies strings graphic elements depend dimensions string (e.g. label borders background). extra_css Extra CSS added SVG. can used embed webfonts. reset_par set TRUE, global graphics parameters saved device start reset every time hgd_clear() called (see graphics::par()).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronous HTTP server graphics device. — hgd","text":"return value, called initialize graphics device.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Asynchronous HTTP server graphics device. — hgd","text":"font settings descriptions adopted excellent 'svglite' package.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asynchronous HTTP server graphics device. — hgd","text":"","code":"if (FALSE) {  hgd() # Initialize graphics device and start server hgd_browse() # Or copy the displayed link in the browser  # Plot something x <- seq(0, 3 * pi, by = 0.1) plot(x, sin(x), type = \"l\")  dev.off() # alternatively: hgd_close() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Open httpgd URL in the browser. — hgd_browse","title":"Open httpgd URL in the browser. — hgd_browse","text":"function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open httpgd URL in the browser. — hgd_browse","text":"","code":"hgd_browse(..., which = dev.cur(), browser = getOption(\"browser\"))"},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open httpgd URL in the browser. — hgd_browse","text":"... Parameters passed hgd_url(). device (ID). browser Program used HTML browser.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open httpgd URL in the browser. — hgd_browse","text":"URL.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open httpgd URL in the browser. — hgd_browse","text":"","code":"if (FALSE) {  hgd() hgd_browse() # open browser hist(rnorm(100))  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_clear.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear all httpgd plot pages. — hgd_clear","title":"Clear all httpgd plot pages. — hgd_clear","text":"function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear all httpgd plot pages. — hgd_clear","text":"","code":"hgd_clear(which = dev.cur())"},{"path":"https://nx10.github.io/httpgd/reference/hgd_clear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear all httpgd plot pages. — hgd_clear","text":"device (ID).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_clear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear all httpgd plot pages. — hgd_clear","text":"Whether pages remove.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_clear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear all httpgd plot pages. — hgd_clear","text":"","code":"if (FALSE) {  hgd() plot(1, 1) hist(rnorm(100)) hgd_clear() hist(rnorm(100))  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Close httpgd device. — hgd_close","title":"Close httpgd device. — hgd_close","text":"achieves effect grDevices::dev.(), close device httpgd type.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close httpgd device. — hgd_close","text":"","code":"hgd_close(which = dev.cur(), all = FALSE)"},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close httpgd device. — hgd_close","text":"device (ID). running httpgd devices closed.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close httpgd device. — hgd_close","text":"Number name new active device (specified device shut ).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close httpgd device. — hgd_close","text":"","code":"if (FALSE) {  hgd() hgd_browse() # open browser hist(rnorm(100)) hgd_close() # Equvalent to dev.off()  hgd() hgd() hgd() hgd_close(all = TRUE) }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random alphanumeric token. — hgd_generate_token","title":"Generate random alphanumeric token. — hgd_generate_token","text":"mainly used internally httpgd, exposed testing purposes.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random alphanumeric token. — hgd_generate_token","text":"","code":"hgd_generate_token(len)"},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random alphanumeric token. — hgd_generate_token","text":"len Token length (number characters).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random alphanumeric token. — hgd_generate_token","text":"Random token string.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random alphanumeric token. — hgd_generate_token","text":"","code":"hgd_generate_token(6) #> [1] \"qgV84b\""},{"path":"https://nx10.github.io/httpgd/reference/hgd_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Query httpgd plot IDs — hgd_id","title":"Query httpgd plot IDs — hgd_id","text":"Query httpgd graphics device static plot IDs. Available plot IDs starting index returned. limit specifies number plots. function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query httpgd plot IDs — hgd_id","text":"","code":"hgd_id(index = 0, limit = 1, which = dev.cur(), state = FALSE)"},{"path":"https://nx10.github.io/httpgd/reference/hgd_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query httpgd plot IDs — hgd_id","text":"index Plot index. set 0, last page selected. limit Limit number returned IDs. set value > 1 returned type list IDs. device (ID). state Include current device state returned result (see also: hgd_state()).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query httpgd plot IDs — hgd_id","text":"TODO","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query httpgd plot IDs — hgd_id","text":"","code":"if (FALSE) {  hgd() plot.new() text(.5, .5, \"#1\") plot.new() text(.5, .5, \"#2\") plot.new() text(.5, .5, \"#3\") third <- hgd_id() second <- hgd_id(2) all <- hgd_id(1, limit = Inf) hgd_remove(1) hgd_svg(second)  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_info.html","id":null,"dir":"Reference","previous_headings":"","what":"httpgd device information. — hgd_info","title":"httpgd device information. — hgd_info","text":"Access general information httpgd graphics device. function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"httpgd device information. — hgd_info","text":"","code":"hgd_info(which = dev.cur())"},{"path":"https://nx10.github.io/httpgd/reference/hgd_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"httpgd device information. — hgd_info","text":"device (ID).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"httpgd device information. — hgd_info","text":"List status variables following named items: $id: Server unique ID, $version: httpgd library versions.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"httpgd device information. — hgd_info","text":"","code":"if (FALSE) {  hgd() hgd_info()  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_inline.html","id":null,"dir":"Reference","previous_headings":"","what":"Inline SVG rendering. — hgd_inline","title":"Inline SVG rendering. — hgd_inline","text":"Convenience function quick inline SVG rendering. similar hgd_svg() plotting code specified inline offline httpgd graphics device managed (created closed) automatically. Starting device hgd() therefore necessary.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_inline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inline SVG rendering. — hgd_inline","text":"","code":"hgd_inline(   code,   page = 0,   page_width = -1,   page_height = -1,   zoom = 1,   renderer = \"svg\",   file = NA,   ... )"},{"path":"https://nx10.github.io/httpgd/reference/hgd_inline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inline SVG rendering. — hgd_inline","text":"code Plotting code. See examples information. page Plot page render. set 0, last page selected. Can set numeric plot index plot ID (see hgd_id()). page_width Width plot. set -1, last width selected. page_height Height plot. set -1, last height selected. zoom Zoom level. (example: 2 corresponds 200%, 0.5 50%.) renderer Renderer. file Filepath save SVG. (file created NA) ... Additional parameters passed hgd(webserver=FALSE, ...)","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_inline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inline SVG rendering. — hgd_inline","text":"Rendered SVG string.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_inline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inline SVG rendering. — hgd_inline","text":"","code":"hgd_inline({   hist(rnorm(100)) }) #> [1] \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" class=\\\"httpgd\\\" width=\\\"720.00\\\" height=\\\"576.00\\\" viewBox=\\\"0 0 720.00 576.00\\\">\\n<defs>\\n  <style type='text/css'><![CDATA[\\n    .httpgd line, .httpgd polyline, .httpgd polygon, .httpgd path, .httpgd rect, .httpgd circle {\\n      fill: none;\\n      stroke: #000000;\\n      stroke-linecap: round;\\n      stroke-linejoin: round;\\n      stroke-miterlimit: 10.00;\\n    }\\n  ]]><\/style>\\n<clipPath id=\\\"c0\\\"><rect x=\\\"0.00\\\" y=\\\"0.00\\\" width=\\\"720.00\\\" height=\\\"576.00\\\"/><\/clipPath>\\n<clipPath id=\\\"c1\\\"><rect x=\\\"59.04\\\" y=\\\"59.04\\\" width=\\\"630.72\\\" height=\\\"443.52\\\"/><\/clipPath>\\n<\/defs>\\n<rect width=\\\"100%\\\" height=\\\"100%\\\" style=\\\"stroke: none;fill: #FFFFFF;\\\"/>\\n<g clip-path=\\\"url(#c0)\\\">\\n<g><text x=\\\"374.40\\\" y=\\\"34.77\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 14.40px;font-weight: bold;\\\" textLength=\\\"203.13px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">Histogram of rnorm(100)<\/text><\/g>\\n<g><text x=\\\"374.40\\\" y=\\\"557.28\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"68.37px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">rnorm(100)<\/text><\/g>\\n<g><text transform=\\\"translate(12.96,280.80) rotate(-90.00)\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"62.02px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">Frequency<\/text><\/g>\\n<line x1=\\\"140.80\\\" y1=\\\"502.56\\\" x2=\\\"608.00\\\" y2=\\\"502.56\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"140.80\\\" y1=\\\"502.56\\\" x2=\\\"140.80\\\" y2=\\\"509.76\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"257.60\\\" y1=\\\"502.56\\\" x2=\\\"257.60\\\" y2=\\\"509.76\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"374.40\\\" y1=\\\"502.56\\\" x2=\\\"374.40\\\" y2=\\\"509.76\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"491.20\\\" y1=\\\"502.56\\\" x2=\\\"491.20\\\" y2=\\\"509.76\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"608.00\\\" y1=\\\"502.56\\\" x2=\\\"608.00\\\" y2=\\\"509.76\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<g><text x=\\\"140.80\\\" y=\\\"528.48\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"11.97px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">-2<\/text><\/g>\\n<g><text x=\\\"257.60\\\" y=\\\"528.48\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"11.97px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">-1<\/text><\/g>\\n<g><text x=\\\"374.40\\\" y=\\\"528.48\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"7.64px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">0<\/text><\/g>\\n<g><text x=\\\"491.20\\\" y=\\\"528.48\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"7.64px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">1<\/text><\/g>\\n<g><text x=\\\"608.00\\\" y=\\\"528.48\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"7.64px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">2<\/text><\/g>\\n<line x1=\\\"59.04\\\" y1=\\\"486.13\\\" x2=\\\"59.04\\\" y2=\\\"119.47\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"59.04\\\" y1=\\\"486.13\\\" x2=\\\"51.84\\\" y2=\\\"486.13\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"59.04\\\" y1=\\\"412.80\\\" x2=\\\"51.84\\\" y2=\\\"412.80\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"59.04\\\" y1=\\\"339.47\\\" x2=\\\"51.84\\\" y2=\\\"339.47\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"59.04\\\" y1=\\\"266.13\\\" x2=\\\"51.84\\\" y2=\\\"266.13\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"59.04\\\" y1=\\\"192.80\\\" x2=\\\"51.84\\\" y2=\\\"192.80\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<line x1=\\\"59.04\\\" y1=\\\"119.47\\\" x2=\\\"51.84\\\" y2=\\\"119.47\\\" style=\\\"stroke-width: 0.75;\\\"/>\\n<g><text transform=\\\"translate(41.76,486.13) rotate(-90.00)\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"7.64px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">0<\/text><\/g>\\n<g><text transform=\\\"translate(41.76,412.80) rotate(-90.00)\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"7.64px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">5<\/text><\/g>\\n<g><text transform=\\\"translate(41.76,339.47) rotate(-90.00)\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"15.28px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">10<\/text><\/g>\\n<g><text transform=\\\"translate(41.76,266.13) rotate(-90.00)\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"15.28px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">15<\/text><\/g>\\n<g><text transform=\\\"translate(41.76,192.80) rotate(-90.00)\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"15.28px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">20<\/text><\/g>\\n<g><text transform=\\\"translate(41.76,119.47) rotate(-90.00)\\\" text-anchor=\\\"middle\\\" style=\\\"font-family: Liberation Sans;font-size: 12.00px;\\\" textLength=\\\"15.28px\\\" lengthAdjust=\\\"spacingAndGlyphs\\\">25<\/text><\/g>\\n<\/g><g clip-path=\\\"url(#c1)\\\">\\n<rect x=\\\"82.40\\\" y=\\\"456.80\\\" width=\\\"58.40\\\" height=\\\"29.33\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<rect x=\\\"140.80\\\" y=\\\"427.47\\\" width=\\\"58.40\\\" height=\\\"58.67\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<rect x=\\\"199.20\\\" y=\\\"383.47\\\" width=\\\"58.40\\\" height=\\\"102.67\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<rect x=\\\"257.60\\\" y=\\\"339.47\\\" width=\\\"58.40\\\" height=\\\"146.67\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<rect x=\\\"316.00\\\" y=\\\"251.47\\\" width=\\\"58.40\\\" height=\\\"234.67\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<rect x=\\\"374.40\\\" y=\\\"75.47\\\" width=\\\"58.40\\\" height=\\\"410.67\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<rect x=\\\"432.80\\\" y=\\\"192.80\\\" width=\\\"58.40\\\" height=\\\"293.33\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<rect x=\\\"491.20\\\" y=\\\"368.80\\\" width=\\\"58.40\\\" height=\\\"117.33\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<rect x=\\\"549.60\\\" y=\\\"427.47\\\" width=\\\"58.40\\\" height=\\\"58.67\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<rect x=\\\"608.00\\\" y=\\\"471.47\\\" width=\\\"58.40\\\" height=\\\"14.67\\\" style=\\\"stroke-width: 0.75;fill: #D3D3D3;\\\"/>\\n<\/g>\\n<\/svg>\"  s <- hgd_inline({   plot.new()   lines(c(0.5, 1, 0.5), c(0.5, 1, 1)) }) cat(s) #> <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"httpgd\" width=\"720.00\" height=\"576.00\" viewBox=\"0 0 720.00 576.00\"> #> <defs> #>   <style type='text/css'><![CDATA[ #>     .httpgd line, .httpgd polyline, .httpgd polygon, .httpgd path, .httpgd rect, .httpgd circle { #>       fill: none; #>       stroke: #000000; #>       stroke-linecap: round; #>       stroke-linejoin: round; #>       stroke-miterlimit: 10.00; #>     } #>   ]]><\/style> #> <clipPath id=\"c0\"><rect x=\"0.00\" y=\"0.00\" width=\"720.00\" height=\"576.00\"/><\/clipPath> #> <clipPath id=\"c1\"><rect x=\"59.04\" y=\"59.04\" width=\"630.72\" height=\"443.52\"/><\/clipPath> #> <\/defs> #> <rect width=\"100%\" height=\"100%\" style=\"stroke: none;fill: #FFFFFF;\"/> #> <g clip-path=\"url(#c0)\"> #> <\/g><g clip-path=\"url(#c1)\"> #> <polyline points=\"374.40,280.80 666.40,75.47 374.40,75.47\" style=\"stroke-width: 0.75;\"/> #> <\/g> #> <\/svg>"},{"path":"https://nx10.github.io/httpgd/reference/hgd_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Render httpgd plot. — hgd_plot","title":"Render httpgd plot. — hgd_plot","text":"function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render httpgd plot. — hgd_plot","text":"","code":"hgd_plot(   page = 0,   width = -1,   height = -1,   zoom = 1,   renderer = \"svg\",   which = dev.cur(),   file = NA )"},{"path":"https://nx10.github.io/httpgd/reference/hgd_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render httpgd plot. — hgd_plot","text":"page Plot page render. set 0, last page selected. Can set numeric plot index plot ID (see hgd_id()). width Width plot. set -1, last width selected. height Height plot. set -1, last height selected. zoom Zoom level. (example: 2 corresponds 200%, 0.5 50%.) renderer Renderer. device (ID). file Filepath save SVG. (file created NA)","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render httpgd plot. — hgd_plot","text":"Rendered SVG string.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render httpgd plot. — hgd_plot","text":"","code":"if (FALSE) {  hgd() plot(1, 1) s <- hgd_plot(width = 600, height = 400, renderer = \"svg\") hist(rnorm(100)) hgd_plot(file = tempfile(), width = 600, height = 400, renderer = \"png\")  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a httpgd plot page. — hgd_remove","title":"Remove a httpgd plot page. — hgd_remove","text":"function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a httpgd plot page. — hgd_remove","text":"","code":"hgd_remove(page = 0, which = dev.cur())"},{"path":"https://nx10.github.io/httpgd/reference/hgd_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a httpgd plot page. — hgd_remove","text":"page Plot page remove. set 0, last page selected. Can set numeric plot index plot ID (see hgd_id()). device (ID).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a httpgd plot page. — hgd_remove","text":"Whether page existed (thereby successfully removed).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a httpgd plot page. — hgd_remove","text":"","code":"if (FALSE) {  hgd() plot(1, 1) # page 1 hist(rnorm(100)) # page 2 hgd_remove(page = 1) # remove page 1  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_renderers.html","id":null,"dir":"Reference","previous_headings":"","what":"httpgd device renderers. — hgd_renderers","title":"httpgd device renderers. — hgd_renderers","text":"Get list available renderers. function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_renderers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"httpgd device renderers. — hgd_renderers","text":"","code":"hgd_renderers()"},{"path":"https://nx10.github.io/httpgd/reference/hgd_renderers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"httpgd device renderers. — hgd_renderers","text":"List renderers following named items: $id: Renderer ID, $mime: File mime type, $ext: File extension, $name: Human readable name, $type: Renderer type (currently either plot ), $bin: file binary blob text.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_renderers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"httpgd device renderers. — hgd_renderers","text":"","code":"hgd_renderers() #>         id                   mime   ext          name type   bin #> 1     meta       application/json .json          Meta data FALSE #> 2  strings             text/plain  .txt       Strings data FALSE #> 3     tikz             text/plain  .tex          TikZ plot FALSE #> 4      eps application/postscript  .eps           EPS plot FALSE #> 5       ps application/postscript   .ps            PS plot FALSE #> 6     json       application/json .json          JSON plot FALSE #> 7     svgp          image/svg+xml  .svg  Portable SVG plot FALSE #> 8      svg          image/svg+xml  .svg           SVG plot FALSE #> 9      pdf        application/pdf  .pdf           PDF plot  TRUE #> 10     png              image/png  .png           PNG plot  TRUE #> 11   svgzp          image/svg+xml .svgz Portable SVGZ plot  TRUE #> 12    svgz          image/svg+xml .svgz          SVGZ plot  TRUE #>                                                        descr #> 1                                     Plot meta information. #> 2                         List of strings contained in plot. #> 3                                           LaTeX TikZ code. #> 4                             Encapsulated PostScript (EPS). #> 5                                           PostScript (PS). #> 6                       Plot data serialized to JSON format. #> 7   Version of the SVG renderer that produces portable SVGs. #> 8                            Scalable Vector Graphics (SVG). #> 9                      Adobe Portable Document Format (PDF). #> 10                          Portable Network Graphics (PNG). #> 11 Version of the SVG renderer that produces portable SVGZs. #> 12               Compressed Scalable Vector Graphics (SVGZ)."},{"path":"https://nx10.github.io/httpgd/reference/hgd_state.html","id":null,"dir":"Reference","previous_headings":"","what":"httpgd device status. — hgd_state","title":"httpgd device status. — hgd_state","text":"Access status information httpgd graphics device. function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"httpgd device status. — hgd_state","text":"","code":"hgd_state(which = dev.cur())"},{"path":"https://nx10.github.io/httpgd/reference/hgd_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"httpgd device status. — hgd_state","text":"device (ID).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"httpgd device status. — hgd_state","text":"List status variables following named items: $host: Server hostname, $port: Server port, $token: Security token, $hsize: Plot history size (many plots accessible), $upid: Update ID (changes device received new information), $active: device currently activated device.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"httpgd device status. — hgd_state","text":"","code":"if (FALSE) {  hgd() hgd_state() plot(1, 1) hgd_state()  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_svg.html","id":null,"dir":"Reference","previous_headings":"","what":"Render httpgd plot to SVG. — hgd_svg","title":"Render httpgd plot to SVG. — hgd_svg","text":"function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_svg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render httpgd plot to SVG. — hgd_svg","text":"","code":"hgd_svg(   page = 0,   width = -1,   height = -1,   zoom = 1,   which = dev.cur(),   file = NA )"},{"path":"https://nx10.github.io/httpgd/reference/hgd_svg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render httpgd plot to SVG. — hgd_svg","text":"page Plot page render. set 0, last page selected. Can set numeric plot index plot ID (see hgd_id()). width Width plot. set -1, last width selected. height Height plot. set -1, last height selected. zoom Zoom level. (example: 2 corresponds 200%, 0.5 50%.) device (ID). file Filepath save SVG. (file created NA)","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_svg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render httpgd plot to SVG. — hgd_svg","text":"Rendered SVG string.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_svg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render httpgd plot to SVG. — hgd_svg","text":"","code":"if (FALSE) {  hgd() plot(1, 1) s <- hgd_svg(width = 600, height = 400) hist(rnorm(100)) hgd_svg(file = tempfile(), width = 600, height = 400)  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_test_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a test pattern that can be used to evaluate and compare graphics\ndevices. — hgd_test_pattern","title":"Plot a test pattern that can be used to evaluate and compare graphics\ndevices. — hgd_test_pattern","text":"Plot test pattern can used evaluate compare graphics devices.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_test_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a test pattern that can be used to evaluate and compare graphics\ndevices. — hgd_test_pattern","text":"","code":"hgd_test_pattern()"},{"path":"https://nx10.github.io/httpgd/reference/hgd_test_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a test pattern that can be used to evaluate and compare graphics\ndevices. — hgd_test_pattern","text":"","code":"if (FALSE) {  hgd_test_pattern() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":null,"dir":"Reference","previous_headings":"","what":"httpgd URL. — hgd_url","title":"httpgd URL. — hgd_url","text":"Generate URLs plot viewer plot SVGs. function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"httpgd URL. — hgd_url","text":"","code":"hgd_url(   endpoint = \"live\",   which = dev.cur(),   websockets = TRUE,   width = -1,   height = -1,   renderer = NA,   history = TRUE,   host = NULL,   port = NULL,   explicit = FALSE )"},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"httpgd URL. — hgd_url","text":"endpoint API endpoint. default, \"live\" HTML/JS plot viewer. Can set numeric plot index plot ID (see hgd_id()) obtain direct URL SVG. device (ID). websockets Use websockets. width Width plot. (used endpoint \"svg\", plot index ID.) height Height plot. (used endpoint \"svg\", plot index ID.) renderer Renderer. history plot history sidebar visible. host Replaces hostname. port Replaces port. explicit Ads hgd={host}:{port} query parameter. Needed host resolution editors.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"httpgd URL. — hgd_url","text":"URL.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"httpgd URL. — hgd_url","text":"","code":"if (FALSE) {  hgd() my_url <- hgd_url() hgd_url(0) hgd_url(plot_id(), width = 800, height = 600)  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Open httpgd URL in the IDE. — hgd_view","title":"Open httpgd URL in the IDE. — hgd_view","text":"Global option viewer needs set function accepts client URL parameter.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open httpgd URL in the IDE. — hgd_view","text":"","code":"hgd_view()"},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open httpgd URL in the IDE. — hgd_view","text":"viewer function return value.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open httpgd URL in the IDE. — hgd_view","text":"function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open httpgd URL in the IDE. — hgd_view","text":"","code":"if (FALSE) {  hgd() hgd_view() hist(rnorm(100))  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_watch.html","id":null,"dir":"Reference","previous_headings":"","what":"Watch for changes in code files and refresh plots automatically. — hgd_watch","title":"Watch for changes in code files and refresh plots automatically. — hgd_watch","text":"function may used rapidly develop visualizations replacing workflow reloading executing code manually.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_watch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Watch for changes in code files and refresh plots automatically. — hgd_watch","text":"","code":"hgd_watch(   watch = list.files(pattern = \"\\\\.R$\", ignore.case = T),   on_change = function(changed_files) {     print(changed_files) },   interval = 1,   on_start = hgd_browse,   on_exit = NULL,   on_error = print,   reset_par = TRUE,   ... )"},{"path":"https://nx10.github.io/httpgd/reference/hgd_watch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Watch for changes in code files and refresh plots automatically. — hgd_watch","text":"watch Paths watched changes (see utils::fileSnapshot()) on_change called file changes. interval Time interval changes detected (seconds). on_start called httpgd server started (may set NULL). on_exit called server closed (may set NULL). on_error called on_change throws error (may set NULL). reset_par set TRUE, global graphics parameters saved device start reset every time hgd_clear() called (see graphics::par()). ... Additional parameters passed hgd(webserver=FALSE, ...)","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_watch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Watch for changes in code files and refresh plots automatically. — hgd_watch","text":"","code":"if (FALSE) {  # --- my_code.R ---  plot(rnorm(100), col = \"red\")  # --- Other file / interactive ---  hgd_watch(   watch=\"my_code.R\", # When my_code.R changes...   on_change = function(...) {     source(\"my_code.R\") # ...call updated plot function.   } )  }"},{"path":"https://nx10.github.io/httpgd/reference/httpgd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"httpgd: HTTP server graphics device — httpgd-package","title":"httpgd: HTTP server graphics device — httpgd-package","text":"Asynchronous HTTP server graphics device.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-130","dir":"Changelog","previous_headings":"","what":"httpgd 1.3.0","title":"httpgd 1.3.0","text":"CRAN release: 2022-02-02 Fixes R 4.2 UCRT support (thanks Tomas Kalibera Uwe Ligges). Added ‘pkgdown’ documentation various vignettes (thanks eitsupi article Docker). Added RStudio viewer support. Added version info API. Added SVGZ support. Improved client export dialog. Minor fixes internal changes.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-121","dir":"Changelog","previous_headings":"","what":"httpgd 1.2.1","title":"httpgd 1.2.1","text":"CRAN release: 2021-09-20 Fix macOS builds. Minor documentation changes.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-120","dir":"Changelog","previous_headings":"","what":"httpgd 1.2.0","title":"httpgd 1.2.0","text":"CRAN release: 2021-09-18 Client rewrite static build pipeline. Added client export dialog. Various client UI improvements. Cairo based renderers PNG, PDF, EPS PS. Portable SVG renderer (easier embedding styling). Special renderers: Serialized JSON, meta information strings. Additions R HTTP APIs selecting listing available renderers. startup default parameters can now set options. Zoom level now handled server side. Fix graphical errors SVG renderer. Improved server URL generation. Browser can specified server URL opened R. Dependency updates UCRT support.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-111","dir":"Changelog","previous_headings":"","what":"httpgd 1.1.1","title":"httpgd 1.1.1","text":"CRAN release: 2021-04-02 Fixed font weight related rendering crash. Small client adjustments.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-110","dir":"Changelog","previous_headings":"","what":"httpgd 1.1.0","title":"httpgd 1.1.0","text":"CRAN release: 2021-04-01 Added plot history sidebar. Improved SVG rendering performance. Added static plot ID API. Font handling improvements. Various client improvements. Added API documentation vignette. Fixed client device inactive desynchronisation. Fixes R devel. Library updates.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-101","dir":"Changelog","previous_headings":"","what":"httpgd 1.0.1","title":"httpgd 1.0.1","text":"CRAN release: 2021-01-21 Fix memory allocation issues graphics device creation libpng. Set cpp11 compile time dependency.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-100","dir":"Changelog","previous_headings":"","what":"httpgd 1.0.0","title":"httpgd 1.0.0","text":"CRAN release: 2021-01-19 First official version intended release CRAN.","code":""}]
