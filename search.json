[{"path":"https://nx10.github.io/httpgd/articles/a00_installation.html","id":"system-requirements","dir":"Articles","previous_headings":"","what":"System requirements","title":"Installation","text":"Depends R version ≥ 4.0 windows, R ≥ 3.2 linux macOS (C++ compiler basic C++17 support required). Note rare bug R versions < 4.1, leads plots disappearing ggplot2 plots resized deleted specific way. Also see unigd system requirements.","code":""},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/a01_how-to-get-started.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"Getting started","text":"See also plotting unigd guide.","code":""},{"path":"https://nx10.github.io/httpgd/articles/b02_rstudio.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"RStudio","text":"open client embedded RStudio Viewer-tab call hgd_view() starting server: view client external browser window call:","code":"library(httpgd) hgd() hgd_view() # hgd() hgd_browse()"},{"path":"https://nx10.github.io/httpgd/articles/b02_rstudio.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"RStudio","text":"Sometimes (Viewer-tab resized plot Plots-tab) RStudio activate graphics device, Plots-tab obtain focus, httpgd show message “Device inactive.” Viewer-tab. list graphics devices (dev.list()) look something like : can easily solved closing current (RStudioGD) graphics device: dev.list() show httpgd device: problem reappear afterwards, even resizing pane.","code":"> dev.list() RStudioGD   agg_png    httpgd          2         3         4 > dev.off() httpgd       4 > dev.list() httpgd       4"},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/b03_docker.html","id":"build-a-docker-image","dir":"Articles","previous_headings":"Basic usage","what":"Build a docker image","title":"Docker","text":"See vignette(\"a00_installation\") details install httpgd Linux. can create Docker image httpgd installed create Dockerfile like . Run docker build command shell build Docker image.","code":"FROM r-base:latest  # Install httpgd and dependent packages. RUN apt-get update \\     && apt-get install -y --no-install-recommends \\     libfontconfig1-dev \\     && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* \\     && install2.r --error --skipinstalled --ncpu -1 \\     httpgd \\     && rm -rf /tmp/downloaded_packages docker build . -f Dockerfile -t httpgd:test"},{"path":"https://nx10.github.io/httpgd/articles/b03_docker.html","id":"create-a-container","dir":"Articles","previous_headings":"Basic usage","what":"Create a container","title":"Docker","text":"creating container docker run command, bind port used httpgd -p (--publish) option. run R container command like following, 8888 port container bound 8888 port Docker host.","code":"docker run --rm -it -p 8888:8888 httpgd:test R"},{"path":"https://nx10.github.io/httpgd/articles/b03_docker.html","id":"start-httpgd-server","dir":"Articles","previous_headings":"Basic usage","what":"Start httpgd server","title":"Docker","text":"Running following command R console initialize graphics device start server. , copy displayed link browser. want display link , execute hgd_url() function follows. hostname can replaced value (e.g. localhost).","code":"httpgd::hgd(host = \"0.0.0.0\", port = 8888) httpgd::hgd_url(host = \"localhost\")"},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/b03_docker.html","id":"set-options-in-rprofile","dir":"Articles","previous_headings":"Advanced usage","what":"Set options in Rprofile","title":"Docker","text":"setting options httpgd.host httpgd.port Rprofile, can omit setting arguments starting httpgd server hgd(). example, create Dockerfile following contents, can build image options already set Rprofile.","code":"FROM r-base:latest  # Install httpgd and dependent packages. RUN apt-get update \\     && apt-get install -y --no-install-recommends \\     libfontconfig1-dev \\     && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* \\     && install2.r --error --skipinstalled --ncpu -1 \\     httpgd \\     && rm -rf /tmp/downloaded_packages  # Set default values used in the httpgd::hgd() function. RUN echo 'options(httpgd.host = \"0.0.0.0\", httpgd.port = 8888)' >> /etc/R/Rprofile.site  EXPOSE 8888"},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"get-state","dir":"Articles","previous_headings":"","what":"Get state","title":"httpgd API","text":"APIs can accessed stateless, graphics device state defined . receive state changes happen WebSockets can used. Alternatively /state may polled repeatedly.","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r","dir":"Articles","previous_headings":"Get state","what":"From R","title":"httpgd API","text":"Note: Prior httpgd 2.0 function also returned host, port security token server. fields now accessed via hgd_details().","code":"unigd::ugd_state()"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http","dir":"Articles","previous_headings":"Get state","what":"From HTTP","title":"httpgd API","text":"respond JSON object.","code":"/state"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-websockets","dir":"Articles","previous_headings":"Get state","what":"From WebSockets","title":"httpgd API","text":"httpgd accepts WebSocket connections port HTTP server. Server state changes broadcasted immediately connected clients JSON format.","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"get-renderers","dir":"Articles","previous_headings":"","what":"Get Renderers","title":"httpgd API","text":"httpgd includes multiple renderers can dynamically render plots different target formats. new formats may added development httpgd continues, depend optional system dependencies, list available renderers can obtained runtime. following complete list renderers.","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r-1","dir":"Articles","previous_headings":"Get Renderers","what":"From R","title":"httpgd API","text":"Returns data frame.","code":"unigd::ugd_renderers()"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http-1","dir":"Articles","previous_headings":"Get Renderers","what":"From HTTP","title":"httpgd API","text":"","code":"/renderers"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"render-plot","dir":"Articles","previous_headings":"","what":"Render plot","title":"httpgd API","text":"Plots can rendered various file formats R HTTP. actual plot construction R relatively slow httpgd caches plot last requested size. Subsequent calls width height without size specified always fast. (way “flipping” plot pages fast.)","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r-2","dir":"Articles","previous_headings":"Render plot","what":"From R","title":"httpgd API","text":"Example: page can either number indicate plot index static plot ID (see: hgd_id()). function returns plot string. file attribute can used save SVG directly disk.","code":"unigd::ugd_render(page = 3, width = 800, height = 600) # Get plot at index 3 with 800*600 unigd::ugd_render() # Get last plot with cached size"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http-2","dir":"Articles","previous_headings":"Render plot","what":"From HTTP","title":"httpgd API","text":"Example: Parameters: Note HTTP API uses 0-based indexing R API 1-based indexing. done conform R JavaScript ends. (means first plot accessed /plot?index=0 unigd::ugd_render(page = 1).)","code":"/plot?index=2&width=800&height=600"},{"path":[]},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r-3","dir":"Articles","previous_headings":"Remove plots","what":"From R","title":"httpgd API","text":"Examples:","code":"unigd::ugd_remove(page = 2) # Remove the second page unigd::ugd_clear() # Clear all pages"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http-3","dir":"Articles","previous_headings":"Remove plots","what":"From HTTP","title":"httpgd API","text":"Examples:","code":"/remove?index=2 /clear"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"get-static-ids","dir":"Articles","previous_headings":"","what":"Get static IDs","title":"httpgd API","text":"problem requesting individual plots index , plots index change earlier plots removed plot history. circumvent , plot also assigned static ID. APIs access individual plots can also called static IDs instead indices.","code":""},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-r-4","dir":"Articles","previous_headings":"Get static IDs","what":"From R","title":"httpgd API","text":"Examples: Note: limit parameter can adjusted obtain multiple plot IDs.","code":"unigd::ugd_id(index = 2) # Static ID of the second plot unigd::ugd_id() # Static ID of the last plot"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"from-http-4","dir":"Articles","previous_headings":"Get static IDs","what":"From HTTP","title":"httpgd API","text":"Examples: Notes: limit parameter can specified support pagination. JSON response contain state allow checking desynchronisation.","code":"/plots?index=2 /plots"},{"path":"https://nx10.github.io/httpgd/articles/c01_httpgd-api.html","id":"security","dir":"Articles","previous_headings":"","what":"Security","title":"httpgd API","text":"security token can set starting device: set, API request include token inside header X-HTTPGD-TOKEN query param ?token=secret. token default set TRUE generate random 8 character alphanumeric token. set number, random token length generated. FALSE deactivates security token. CORS default can enabled startup:","code":"hgd(..., token = \"secret\") hgd(..., cors = TRUE)"},{"path":"https://nx10.github.io/httpgd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Florian Rupprecht. Author, maintainer. Kun Ren. Contributor. Jeroen Ooms. Contributor.","code":""},{"path":"https://nx10.github.io/httpgd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rupprecht F (2024). httpgd: 'HTTP' Server Graphics Device. R package version 2.0.0.9000,  https://nx10.github.io/httpgd/, https://github.com/nx10/httpgd.","code":"@Manual{,   title = {httpgd: A 'HTTP' Server Graphics Device},   author = {Florian Rupprecht},   year = {2024},   note = {R package version 2.0.0.9000,  https://nx10.github.io/httpgd/},   url = {https://github.com/nx10/httpgd}, }"},{"path":"https://nx10.github.io/httpgd/index.html","id":"httpgd-","dir":"","previous_headings":"","what":"A HTTP Server Graphics Device","title":"A HTTP Server Graphics Device","text":"graphics device R accessible via network protocols. package created make easier embed live R graphics integrated development environments applications. included HTML/JavaScript client (plot viewer) aims provide better overall user experience dealing R graphics. device asynchronously serves graphics via HTTP WebSockets.","code":""},{"path":"https://nx10.github.io/httpgd/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"A HTTP Server Graphics Device","text":"Fast plotting Interactive plot viewer (client) Supports multiple clients concurrently Plot resizing history Export various image formats (SVG, PNG, PDF, EPS, …) Powered unigd Stateless asynchronous HTTP/WebSocket API HTML/JavaScript client (TypeScript module)","code":""},{"path":[]},{"path":"https://nx10.github.io/httpgd/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A HTTP Server Graphics Device","text":"Install httpgd CRAN: get latest development version GitHub: See system requirements troubleshooting.","code":"install.packages(\"httpgd\") remotes::install_github(\"nx10/httpgd\")"},{"path":"https://nx10.github.io/httpgd/index.html","id":"documentation","dir":"","previous_headings":"Installation","what":"Documentation","title":"A HTTP Server Graphics Device","text":"get started Plotting unigd Function reference VS Code RStudio Docker httpgd API","code":""},{"path":"https://nx10.github.io/httpgd/index.html","id":"contributions-welcome","dir":"","previous_headings":"","what":"Contributions welcome!","title":"A HTTP Server Graphics Device","text":"various components httpgd written C++, R TypeScript. welcome contributions kind. areas need improvement testing documentation.","code":""},{"path":"https://nx10.github.io/httpgd/index.html","id":"links--articles","dir":"","previous_headings":"","what":"Links & Articles","title":"A HTTP Server Graphics Device","text":"Using httpgd VSCode: web-based SVG graphics device","code":""},{"path":"https://nx10.github.io/httpgd/index.html","id":"about--license","dir":"","previous_headings":"","what":"About & License","title":"A HTTP Server Graphics Device","text":"Depends cpp11. Webserver based CrowCpp/Crow. project licensed GPL v2.0. HTML client includes Material Design icons Google licensed Apache License Version 2.0. Full copies license agreements used components included ./inst/licenses.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous HTTP server graphics device. — hgd","title":"Asynchronous HTTP server graphics device. — hgd","text":"function initializes httpgd graphics device starts local webserver, allows access via HTTP WebSockets. link printed web client can accessed using browser.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous HTTP server graphics device. — hgd","text":"","code":"hgd(   host = getOption(\"httpgd.host\", \"127.0.0.1\"),   port = getOption(\"httpgd.port\", 0),   cors = getOption(\"httpgd.cors\", FALSE),   token = getOption(\"httpgd.token\", TRUE),   silent = getOption(\"httpgd.silent\", FALSE),   width = getOption(\"httpgd.width\", 720),   height = getOption(\"httpgd.height\", 576),   zoom = getOption(\"httpgd.zoom\", 1),   bg = getOption(\"httpgd.bg\", \"white\"),   pointsize = getOption(\"httpgd.pointsize\", 12),   system_fonts = getOption(\"httpgd.system_fonts\", list()),   user_fonts = getOption(\"httpgd.user_fonts\", list()),   reset_par = getOption(\"httpgd.reset_par\", FALSE) )"},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous HTTP server graphics device. — hgd","text":"host Server hostname. Set \"0.0.0.0\" enable remote access. recommend enable remote access trusted networks. network security httpgd yet properly tested. port Server port. set 0, open port assigned. cors Toggles Cross-Origin Resource Sharing (CORS) header. set TRUE, CORS header set \"*\". token (Optional) security token. set, requests need include token allowed. (Either request header (X-HTTPGD-TOKEN) field query parameter.) parameter can set TRUE generate random 8 character alphanumeric token. random token specified length generated set number. FALSE deactivates token. silent set FALSE information printed console. width Initial plot width (pixels). height Initial plot height (pixels). zoom Initial plot zoom level (example: 2 corresponds 200%, 0.5 50%.). bg Background color. pointsize Graphics device point size. system_fonts Named list font names aliased fonts installed system. unspecified, R default families sans, serif, mono symbol aliased family returned systemfonts::font_info(). user_fonts Named list fonts aliased font files provided user rather fonts properly installed system. aliases can fonts fontquiver package, strings containing path font file, list containing name file elements name indicating font alias SVG output file path font file. reset_par set TRUE, global graphics parameters saved device start reset every time plots cleared (see graphics::par()).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronous HTTP server graphics device. — hgd","text":"return value, called initialize graphics device.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Asynchronous HTTP server graphics device. — hgd","text":"font settings descriptions adopted excellent 'svglite' package.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asynchronous HTTP server graphics device. — hgd","text":"","code":"if (FALSE) {  hgd() # Initialize graphics device and start server hgd_browse() # Or copy the displayed link in the browser  # Plot something x <- seq(0, 3 * pi, by = 0.1) plot(x, sin(x), type = \"l\")  dev.off() # alternatively: hgd_close() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Open httpgd URL in the browser. — hgd_browse","title":"Open httpgd URL in the browser. — hgd_browse","text":"function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open httpgd URL in the browser. — hgd_browse","text":"","code":"hgd_browse(..., which = dev.cur(), browser = getOption(\"browser\"))"},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open httpgd URL in the browser. — hgd_browse","text":"... Parameters passed hgd_url(). device (ID). browser Program used HTML browser.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open httpgd URL in the browser. — hgd_browse","text":"URL.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_browse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open httpgd URL in the browser. — hgd_browse","text":"","code":"if (FALSE) {  hgd() hgd_browse() # open browser hist(rnorm(100))  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Close httpgd device. — hgd_close","title":"Close httpgd device. — hgd_close","text":"achieves effect grDevices::dev.(), close device httpgd type.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close httpgd device. — hgd_close","text":"","code":"hgd_close(which = dev.cur(), all = FALSE)"},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close httpgd device. — hgd_close","text":"device (ID). running httpgd devices closed.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close httpgd device. — hgd_close","text":"Number name new active device (specified device shut ).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_close.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close httpgd device. — hgd_close","text":"","code":"if (FALSE) {  hgd() hgd_browse() # open browser hist(rnorm(100)) hgd_close() # Equvalent to dev.off()  hgd() hgd() hgd() hgd_close(all = TRUE) }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_details.html","id":null,"dir":"Reference","previous_headings":"","what":"httpgd device status. — hgd_details","title":"httpgd device status. — hgd_details","text":"Access status information httpgd graphics device. function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"httpgd device status. — hgd_details","text":"","code":"hgd_details(which = dev.cur())"},{"path":"https://nx10.github.io/httpgd/reference/hgd_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"httpgd device status. — hgd_details","text":"device (ID).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"httpgd device status. — hgd_details","text":"List status variables following named items: $host: Server hostname, $port: Server port, $token: Security token, $hsize: Plot history size (many plots accessible), $upid: Update ID (changes device received new information), $active: device currently activated device.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"httpgd device status. — hgd_details","text":"","code":"if (FALSE) {  hgd() hgd_details() plot(1, 1) hgd_details()  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random alphanumeric token. — hgd_generate_token","title":"Generate random alphanumeric token. — hgd_generate_token","text":"mainly used internally httpgd, exposed testing purposes.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random alphanumeric token. — hgd_generate_token","text":"","code":"hgd_generate_token(len)"},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random alphanumeric token. — hgd_generate_token","text":"len Token length (number characters).","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random alphanumeric token. — hgd_generate_token","text":"Random token string.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_generate_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random alphanumeric token. — hgd_generate_token","text":"","code":"hgd_generate_token(6) #> [1] \"cZjSAg\""},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":null,"dir":"Reference","previous_headings":"","what":"httpgd URL. — hgd_url","title":"httpgd URL. — hgd_url","text":"Generate URLs plot viewer plot SVGs. function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"httpgd URL. — hgd_url","text":"","code":"hgd_url(   endpoint = \"live\",   which = dev.cur(),   host = NA,   port = NA,   explicit = FALSE,   omit_token = FALSE,   ... )"},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"httpgd URL. — hgd_url","text":"endpoint API endpoint. default, \"live\" HTML/JS plot viewer. Can set numeric plot index plot ID (see unigd::ugd_id()) obtain direct URL SVG. device (ID). host Replaces hostname. port Replaces port. explicit Ads hgd={host}:{port} query parameter. Needed host resolution editors. omit_token security token omitted URL. \\dots query parameters appended URL.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"httpgd URL. — hgd_url","text":"URL.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"httpgd URL. — hgd_url","text":"Note: included client used set websockets=0 sidebar=0 turn WebSocket plot history sidebar.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"httpgd URL. — hgd_url","text":"","code":"if (FALSE) {  hgd() my_url <- hgd_url() hgd_url(0) hgd_url(plot_id(), width = 800, height = 600)  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Open httpgd URL in the IDE. — hgd_view","title":"Open httpgd URL in the IDE. — hgd_view","text":"Global option viewer needs set function accepts client URL parameter.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open httpgd URL in the IDE. — hgd_view","text":"","code":"hgd_view()"},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open httpgd URL in the IDE. — hgd_view","text":"viewer function return value.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open httpgd URL in the IDE. — hgd_view","text":"function work starting device hgd().","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open httpgd URL in the IDE. — hgd_view","text":"","code":"if (FALSE) {  hgd() hgd_view() hist(rnorm(100))  dev.off() }"},{"path":"https://nx10.github.io/httpgd/reference/hgd_watch.html","id":null,"dir":"Reference","previous_headings":"","what":"Watch for changes in code files and refresh plots automatically. — hgd_watch","title":"Watch for changes in code files and refresh plots automatically. — hgd_watch","text":"function may used rapidly develop visualizations replacing workflow reloading executing code manually.","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_watch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Watch for changes in code files and refresh plots automatically. — hgd_watch","text":"","code":"hgd_watch(   watch = list.files(pattern = \"\\\\.R$\", ignore.case = T),   on_change = function(changed_files) {      print(changed_files)  },   interval = 1,   on_start = hgd_browse,   on_exit = NULL,   on_error = print,   reset_par = TRUE,   ... )"},{"path":"https://nx10.github.io/httpgd/reference/hgd_watch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Watch for changes in code files and refresh plots automatically. — hgd_watch","text":"watch Paths watched changes (see utils::fileSnapshot()) on_change called file changes. interval Time interval changes detected (seconds). on_start called httpgd server started (may set NULL). on_exit called server closed (may set NULL). on_error called on_change throws error (may set NULL). reset_par set TRUE, global graphics parameters saved device start reset every time unigd::ugd_clear() called (see graphics::par()). ... Additional parameters passed hgd(webserver=FALSE, ...)","code":""},{"path":"https://nx10.github.io/httpgd/reference/hgd_watch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Watch for changes in code files and refresh plots automatically. — hgd_watch","text":"","code":"if (FALSE) {  # --- my_code.R ---  plot(rnorm(100), col = \"red\")  # --- Other file / interactive ---  hgd_watch(   watch = \"my_code.R\", # When my_code.R changes...   on_change = function(...) {     source(\"my_code.R\") # ...call updated plot function.   } ) }"},{"path":"https://nx10.github.io/httpgd/reference/httpgd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"httpgd: HTTP server graphics device — httpgd-package","title":"httpgd: HTTP server graphics device — httpgd-package","text":"Asynchronous HTTP server graphics device.","code":""},{"path":[]},{"path":"https://nx10.github.io/httpgd/reference/httpgd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"httpgd: HTTP server graphics device — httpgd-package","text":"Maintainer: Florian Rupprecht floruppr@gmail.com (ORCID) contributors: Kun Ren mail@renkun.[contributor] Jeroen Ooms jeroen@berkeley.edu (ORCID) [contributor]","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-200","dir":"Changelog","previous_headings":"","what":"httpgd 2.0.0","title":"httpgd 2.0.0","text":"Split graphics rendering R interface seperate package ‘unigd’. Large refactoring rewrite. Numerous fixes improvements ‘unigd’ (see NEWS.md ). Migrate crow web server library (due belle deprecated). Add live reload feature. Various library updates.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-130","dir":"Changelog","previous_headings":"","what":"httpgd 1.3.0","title":"httpgd 1.3.0","text":"CRAN release: 2022-02-02 Fixes R 4.2 UCRT support (thanks Tomas Kalibera Uwe Ligges). Added ‘pkgdown’ documentation various vignettes (thanks eitsupi article Docker). Added RStudio viewer support. Added version info API. Added SVGZ support. Improved client export dialog. Minor fixes internal changes.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-121","dir":"Changelog","previous_headings":"","what":"httpgd 1.2.1","title":"httpgd 1.2.1","text":"CRAN release: 2021-09-20 Fix macOS builds. Minor documentation changes.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-120","dir":"Changelog","previous_headings":"","what":"httpgd 1.2.0","title":"httpgd 1.2.0","text":"CRAN release: 2021-09-18 Client rewrite static build pipeline. Added client export dialog. Various client UI improvements. Cairo based renderers PNG, PDF, EPS PS. Portable SVG renderer (easier embedding styling). Special renderers: Serialized JSON, meta information strings. Additions R HTTP APIs selecting listing available renderers. startup default parameters can now set options. Zoom level now handled server side. Fix graphical errors SVG renderer. Improved server URL generation. Browser can specified server URL opened R. Dependency updates UCRT support.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-111","dir":"Changelog","previous_headings":"","what":"httpgd 1.1.1","title":"httpgd 1.1.1","text":"CRAN release: 2021-04-02 Fixed font weight related rendering crash. Small client adjustments.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-110","dir":"Changelog","previous_headings":"","what":"httpgd 1.1.0","title":"httpgd 1.1.0","text":"CRAN release: 2021-04-01 Added plot history sidebar. Improved SVG rendering performance. Added static plot ID API. Font handling improvements. Various client improvements. Added API documentation vignette. Fixed client device inactive desynchronisation. Fixes R devel. Library updates.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-101","dir":"Changelog","previous_headings":"","what":"httpgd 1.0.1","title":"httpgd 1.0.1","text":"CRAN release: 2021-01-21 Fix memory allocation issues graphics device creation libpng. Set cpp11 compile time dependency.","code":""},{"path":"https://nx10.github.io/httpgd/news/index.html","id":"httpgd-100","dir":"Changelog","previous_headings":"","what":"httpgd 1.0.0","title":"httpgd 1.0.0","text":"CRAN release: 2021-01-19 First official version intended release CRAN.","code":""}]
